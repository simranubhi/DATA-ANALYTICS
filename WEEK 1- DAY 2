                                                                            ---- Week 1 (DAY-2) ----

Topics Covered: R syntax: variables, data types, operators, vectors, matrices, data frames), Basic functions and help documentation

1. Variables in R
Variables store data values and are created using the <- or = operator.
Example:  x <- 10
          y = "R Programming"
Variable names should start with a letter.

<- is preferred in R programming for assignment.

2. Data Types in R
R supports several basic data types:
----------------------------------------------------------------------
|   Type     |           Description	       |         Example       |
| -----------|-------------------------------|-----------------------|
| Numeric    |  	Real or decimal numbers	   |       x <- 3.14       |
| Integer	   |       Whole numbers           |  	x <- as.integer(5) |
| Character	 |          Text data	           |    name <- "Simran"   |
| Logical	   |      TRUE or FALSE values	   |        flag <- TRUE   |
| Complex	   |         Complex numbers       |       	z <- 2 + 3i    |
----------------------------------------------------------------------

You can check the type using:
class(x)
typeof(x)


 3. Operators in R

--  Arithmetic Operators --

a + b    # addition
a - b    # subtraction
a * b    # multiplication
a / b    # division
a ^ b    # exponentiation
a %% b   # modulo (remainder)
a %/% b  # integer division

-- Relational Operators --
Used for comparisons; returns TRUE or FALSE.

a == b   # equal
a != b   # not equal
a > b    # greater than
a < b    # less than
a >= b   # greater than or equal
a <= b   # less than or equal

-- Logical Operators --
Used for combining conditions.

&   # AND
|   # OR
!   # NOT

4. Vectors
A vector is a sequence of data elements of the same type.

v1 <- c(1, 2, 3, 4, 5)
v2 <- c("a", "b", "c")
v3 <- c(TRUE, FALSE, TRUE)

Vectors are the most basic data structure in R and are used in mathematical and statistical operations.

5. Matrices
A matrix is a two-dimensional collection of elements of the same type.

m1 <- matrix(1:9, nrow = 3, ncol = 3)
Use indexing to access elements: m1[1,2] → first row, second column.

6. Data Frames
A data frame is like a table — it can hold multiple data types (numeric, character, etc.) in columns.

df <- data.frame(
  ID = c(101, 102, 103),
  Name = c("Amit", "Sara", "John"),
  Score = c(90, 85, 88)
)
Access columns using $: df$Name

7. Basic Functions
R has many built-in functions to work with data:
------------------------------------------------------------
| Function	     |            Purpose                      |
|----------------|-----------------------------------------|
| sum()	         |         Add all numbers                 |
| mean()         |      	Calculate average                |
| median()       |         	Median value                   |
| length()	     |  Count elements in vector/data frame    |
| min() / max()	 |   Find smallest/largest value           |
| sort()         |        	Sort elements                  |
------------------------------------------------------------

Example:
vec <- c(10, 5, 7)
sum(vec)         # 22
mean(vec)        # 7.33


8. Help Documentation in R
To get help or understand any function in R:
- ?function_name → Example: ?mean
- help(function_name) → Example: help(sum)
- example(function_name) → Shows example usage
- str() → Shows structure of an object

Example:
?mean         # Opens help page for mean()
example(plot) # Shows how to use plot() function

Real-Life Use Cases
- Vectors: Store daily temperatures or survey answers.
- Matrices: Represent tables like a multiplication table or image pixels.
- Data Frames: Handle real-world data like sales records, student data, or medical reports.
- Operators: Filter people above age 18, calculate tax, check discounts.
- Functions: Quickly summarize, calculate, and visualize large datasets.
